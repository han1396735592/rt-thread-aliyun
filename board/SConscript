import os
import rtconfig
from building import *

Import('SDK_LIB')

cwd = GetCurrentDir()

# add general drivers
src = Split('''
board.c
CubeMX_Config/Src/stm32f4xx_hal_msp.c
''')

if GetDepend(['BSP_USING_ETH']):
    src += Glob('ports/phy_reset.c')

if GetDepend(['BSP_USING_SPI_FLASH']):
    src += Glob('ports/spi_flash_init.c')

if GetDepend(['BSP_USING_SDCARD']):
    src += Glob('ports/sdcard_port.c')


if GetDepend(['RT_USING_LED']):
	src += Glob('sdk_lib/LEDLib.c')
	src += Glob('sdk_lib/GPL/GPL-string.c')

if GetDepend(['RT_USING_LED_SH_C1P']):
	src += Glob('sdk_lib/model/SH-C1P.c')
if GetDepend(['RT_USING_LED_SH_C1X']):
	src += Glob('sdk_lib/model/SH-C1X.c')
path =  [cwd]
path += [cwd + '/CubeMX_Config/Inc']
path += [cwd + '/ports']

path += [cwd+'/sdk_lib']
path += [cwd+'/sdk_lib/module']
path += [cwd+'/sdk_lib/GPL']

startup_path_prefix = SDK_LIB

if rtconfig.CROSS_TOOL == 'gcc':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f407xx.s']
elif rtconfig.CROSS_TOOL == 'keil':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm/startup_stm32f407xx.s']
elif rtconfig.CROSS_TOOL == 'iar':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar/startup_stm32f407xx.s']

CPPDEFINES = ['STM32F407xx']
group = DefineGroup('Drivers', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')